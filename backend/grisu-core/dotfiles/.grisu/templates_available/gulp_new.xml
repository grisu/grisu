<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<JobDefinition xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl">


	<!-- 	Only the "Common" module is used here. It is recommended that you always
		use the "Common" module because it is very unintuitive if the parameters 
		it encapsulates have to be put in by hand. These parameters are:
		* Jobname
		* Walltime
		* CPUs
		* HostName
		* ExecutionFileSystem
		* EmailAddress 
		
		When using a module, you have to use which so called template nodes are used 
		by it. And you have to know what names the module expects for these nodes.
		If one or more of these names are not available in the template, the module is 
		not used at all and all the template nodes that it normally would use are
		given to the "Rest" module, which is automatically created everytime one or
		more template nodes of a template are not claimed by a module.
	-->
	<JobDescription grisu_modules="CommonWithMemory">

		<GrisuTemplate xmlns="http://arcs.org.au/jsdl/jsdl-grisu">
		<Email 	template="Email" 
					   	name="EmailAddress"
						description="The email address to send an email to if the job status changes."
						multiplicity="?" 
						other="useLastValue" />
		</GrisuTemplate>

		<JobIdentification>

			<!-- The JobName template type renders a panel that is kind of 
				smart about which jobnames already exist and can suggest or automatically
				fill in appropriate jobnames according to the user-input/defaultValue that
				is set.
			-->
			<JobName defaultValue="gulp_generic" description="The name of the job." name="Jobname" other="autosuggest,nosuggestbutton" template="JobName">gulp_generic</JobName>

		</JobIdentification>

		<Application>
			<!-- 	The ApplicationName is a generic name for an application. It does not
				contain the path or anything else. This name could be used by mds to figure
				out where the application is supported.
				It is also used by Grisu to determine whether an application-specific viewer 
				panel for this application exists so if you want to use one of these then you
				need to know what the name is that Grisu expects.
			-->
			<ApplicationName>gulp</ApplicationName>
			<Description>
				GULP description
			</Description>
			<POSIXApplication xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl-posix">

				<!-- 	The path to the executable. If you load a module you may not need the
					path and the name of the executable is enough.
				-->
				<Executable>gulp</Executable>
				<!-- 	The substitute attribute tags the enclosing element so that Grisu knows when 
					it gets a "Substitute" postprocessor instruction to replace the value of this
					element with the value of the postprocessors parent element. It is possible
					to further postprocess this value, which can be specified between the [ ] after the
					substitute variable name. basename, for example, shortens the whole path with
					the basename. -->

				<WorkingDirectory filesystemName="userExecutionHostFs" postprocess="FillWithJobDirectoryRelativeToExecutionFileSystem"/>
				
				<!-- 	The name of the standard input file. -->
				<Input substitute="STDINPUTFILE[basename]"> </Input>
				<!-- 	The name of the standard output file. -->
				<Output substitute="STDINPUTFILE[changeextension:(got)]" > </Output>
				<!--  	The name of the standard error file. -->
				<Error>stderr.txt</Error>
				<!-- 	loads the module needed for a namd job -->
				<Module description="The module to load" multiplicity="?" name="Module" template="InputString"></Module>
				
			</POSIXApplication>

			<!-- The total cpu time in seconds. Since the jsdl standard uses this instead
				of the concept of walltime we know we need to multiply this value with
				the amount of cpus (which the postprocess instruction does). 
			-->
			<TotalCPUTime defaultValue="600" description="The total cpu time in seconds." multiplicity="1" name="Walltime" postprocess="TimesNoCPUs" template="InputInteger">1200</TotalCPUTime>

			<TotalCPUCount><exact defaultValue="2" description="How many CPUs do you want to use to run this job." multiplicity="1" name="CPUs" prefills="2,4,8" template="InputInteger" other="force=parallel"/></TotalCPUCount>

			
			<TotalPhysicalMemory> 
				<LowerBoundedRange postprocess="ConvertToBytes" defaultValue="0" description="The minimum amount of memory in mb for this job." multiplicity="1" name="MinMem" prefills="0,1024,2048,4096" template="InputInteger"> </LowerBoundedRange>
			</TotalPhysicalMemory>
			
		</Application>
		<Resources>
			
			<CandidateHosts>
				<!-- The following two nodes depend on each other. You can't submit a job to the host specified
					by "HostName" and stage the files into a filesystem "userExecutionHostFs" that is at a 
					different site. The module "Common" should take care of that so just leave the following
					two nodes as they are. If you are not using the "Common" module, you need to make sure that
					the input is correct.
				-->
				<HostName description="Where do you want to submit the job to?" multiplicity="1" name="HostName" template="InputString"> </HostName>

			</CandidateHosts>
			<!--  It is recommended to always use "userExecutionHostFs" as the filesystem alias for the filesystem you
				are actually using to stage the input files. The value of this node is the root url of a mountpoing, 
				for example: gsiftp://ngdata.vpac.org/home/grid-admin/<USER_DN>.
				The grisu backend does all calculating of where that directory actually is relative to the cluster
				home directory of the user the job gets run as locally. -->
			<FileSystem name="userExecutionHostFs">
				<MountSource multiplicity="1" name="ExecutionFileSystem" template="InputString"> </MountSource>

				<FileSystemType>normal</FileSystemType>
			</FileSystem>
		</Resources>
		<!--  The following DataStaging element -->

		<DataStaging>
			<FileName />
			<FileSystemName>userExecutionHostFs</FileSystemName>
			<Source>
				<URI template="InputFile" name="A_Gulp_StdInputFile"
					title="Please select your GULP input file (.gin)"
					multiplicity="1"
					other="render=combobox,useHistory,lastDirectory"
					postprocess="FillDataStagingFileNameElement,Substitute[name=STDINPUTFILE]" />
			</Source>
			</DataStaging>
		<DataStaging>
			<FileName></FileName>
			<FileSystemName>userExecutionHostFs</FileSystemName>
			<Source>
				<URI description="All the other files you want to stage into the job directory." multiplicity="*" name="OptionalFiles" other="hideDescription" postprocess="FillDataStagingFileNameElement" template="MultipleInputFiles" title="Add here any additonal files for the GULP calculation - eg. restart files" validator="InputFile"></URI>
			</Source>
		</DataStaging>

	</JobDescription>
</JobDefinition>
