<?xml version="1.0" encoding="UTF-8"?>
<JobDefinition xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl">


	<!-- 	Only the "Common" module is used here. It is recommended that you always
	   		use the "Common" module because it is very unintuitive if the parameters 
	   		it encapsulates have to be put in by hand. These parameters are:
	   			* Jobname
				* Walltime
				* CPUs
				* HostName
				* ExecutionFileSystem
				* EmailAddress 
						
			When using a module, you have to use which so called template nodes are used 
			by it. And you have to know what names the module expects for these nodes.
			If one or more of these names are not available in the template, the module is 
			not used at all and all the template nodes that it normally would use are
			given to the "Rest" module, which is automatically created everytime one or
			more template nodes of a template are not claimed by a module.
	-->
	<JobDescription grisu_modules="MatchMakerPanel">
	
		<GrisuTemplate xmlns="http://arcs.org.au/jsdl/jsdl-grisu">
			<Email description="The email address to send an email to if the job status changes." multiplicity="?" name="EmailAddress" other="useLastValue" template="Email"/>
	    </GrisuTemplate>
	
		<JobIdentification>
	
			<JobName 	template="JobName" 
						name="Jobname"
						description="The name of the job." 
						defaultValue="underworld_job" 
						other="autosuggest,nosuggestbutton" />

		</JobIdentification>
		
		<Application>

			<ApplicationName>Underworld</ApplicationName>
			<ApplicationVersion template="Version" name="Version" description="The version of underworld"  defaultValue="1.2.0" other="useDefault,useExact,startMode=Default"></ApplicationVersion>
			
			<Description>
				Underworld (http://www.underworldproject.org/) is a 3D-parallel geodynamic modelling framework
				capable of deriving viscous / viscoplastic thermal, chemical and thermochemical models consistent
				with tectonic processes, such as mantle convection and lithospheric deformation over long time scales.
				Underworld utilises a Lagrangian particle-in-cell finite element scheme (the prototype of which is 
				the Ellipsis code), and is visualised using gLucifer. The Underworld source code is written in C in 
				an Object Oriented style, following the methodology of design for change applied to computational 
				codes implemented in StGermain (http://www.stgermainproject.org/). It uses PETSc 
				(http://www-unix.mcs.anl.gov/petsc) (optimised numerical solvers) and MPI (parallelism) libraries. 
				The Underworld to StGermain software stack is released under a mixture of BSD and LGPL licenses. 
				Underworld is under collaborative development by Monash University (http://www.monash.edu.au/) and 
				the VPAC (http://www.vpac.org/), as part of the NCRIS AuScope capabilty in the Simulation and 
				Modelling Victoria (http://www.auscope.monash.edu.au/) program. 
			</Description>
			<POSIXApplication
				xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl-posix">
				
				<!-- 	The path to the executable. If you load a module you may not need the
						path and the name of the executable is enough.
				-->
				<Executable>Underworld</Executable>
				<Argument template="MultipleInputString" multiplicity="*" name="Additional Command(s) (optional)" description="Enter any additional commands in this field (otherwise leave blank)" other="render=combobox,useHistory"/>

				<Argument substitute="INPUT_FILE1[basename]"></Argument>
	
				<WorkingDirectory/>
				<!-- 	The name of the standard output file. -->
				<Output>stdout.txt</Output>
				<!--  	The name of the standard error file. -->
				<Error>stderr.txt</Error>
				<!--	The name of the module. -->


			</POSIXApplication>
			
			<!-- The total cpu time in seconds. Since the jsdl standard uses this instead
				 of the concept of walltime we know we need to multiply this value with
				 the amount of cpus (which the postprocess instruction does). 
		  	-->
			<TotalCPUTime template="InputInteger" name="Walltime"
				description="The total cpu time in seconds."
				multiplicity="1" defaultValue="600" 
				postprocess="TimesNoCPUs"
			/>

			<TotalCPUCount><exact template="InputInteger" name="CPUs"
				description="How many CPUs do you want to use to run this job."
				multiplicity="1" defaultValue="2" other="force=parallel" /></TotalCPUCount>
				
			<TotalPhysicalMemory> 
				<LowerBoundedRange postprocess="ConvertToBytes" defaultValue="0" description="The minimum amount of memory in mb for this job." multiplicity="1" name="MinMem" prefills="0,1024,2048,4096" template="InputInteger"> </LowerBoundedRange>
			</TotalPhysicalMemory>

		</Application>
		<Resources>
			<CandidateHosts>

				<HostName template="InputString" name="HostName"/>

			</CandidateHosts>

		</Resources>

		<DataStaging>
			<FileName />
			<FileSystemName></FileSystemName>
			<Source>
				<URI template="UnderworldInputFile" name="InputFile1"
					title="InputFile"
					multiplicity="1" postprocess="Substitute[name=INPUT_FILE1]"
					other="render=combobox,useHistory,hideDescription,directoryKey=underworld"
					validator="InputFile" />

			</Source>
		</DataStaging>
				<DataStaging>
			<FileName></FileName>
			<FileSystemName></FileSystemName>
			<Source>
				<URI template="MultipleInputFiles" name="OptionalFiles"
					 title="Optional files"
					description="All the other files you want to stage into the job directory." multiplicity="*"
					validator="InputFile"
					other="directoryKey=underworld">
				</URI>
			</Source>
		</DataStaging>

	</JobDescription>
</JobDefinition>
