<?xml version="1.0" encoding="UTF-8"?>
<JobDefinition xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl">


	<!-- 	Only the "Common" module is used here. It is recommended that you always
	   		use the "Common" module because it is very unintuitive if the parameters 
	   		it encapsulates have to be put in by hand. These parameters are:
	   			* Jobname
				* Walltime
				* CPUs
				* HostName
				* ExecutionFileSystem
				* EmailAddress 
						
			When using a module, you have to use which so called template nodes are used 
			by it. And you have to know what names the module expects for these nodes.
			If one or more of these names are not available in the template, the module is 
			not used at all and all the template nodes that it normally would use are
			given to the "Rest" module, which is automatically created everytime one or
			more template nodes of a template are not claimed by a module.
	-->
	<JobDescription grisu_modules="MatchMakerPanel">
		<GrisuTemplate xmlns="http://arcs.org.au/jsdl/jsdl-grisu">
		<Email 	template="Email" 
					   	name="EmailAddress"
						description="The email address to send an email to if the job status changes."
						multiplicity="?" 
						other="useLastValue" />
		</GrisuTemplate>
		<Module xmlns="http://arcs.org.au/jsdl/jsdl-grisu" name="A_Module" title="Module" template="InputString"></Module>
	
		<JobIdentification>
	
			<!-- The JobName template type renders a panel that is kind of 
				 smart about which jobnames already exist and can suggest or automatically
				 fill in appropriate jobnames according to the user-input/defaultValue that
				 is set.
		    -->
			<JobName 	template="JobName" 
						name="Jobname"
						description="The name of the job." 
						defaultValue="generic_job" 
						other="autosuggest,nosuggestbutton" />

		</JobIdentification>
		
		<Application>
			<!-- 	The ApplicationName is a generic name for an application. It does not
				 	contain the path or anything else. This name could be used by mds to figure
				 	out where the application is supported.
				 	It is also used by Grisu to determine whether an application-specific viewer 
				 	panel for this application exists so if you want to use one of these then you
				 	need to know what the name is that Grisu expects.
			-->
			<ApplicationName >generic</ApplicationName>
			<ApplicationVersion template="Version" name="Version" title="Version" description="The version" defaultValue="any_version" other="useDefault"></ApplicationVersion>
			
			<POSIXApplication
				xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl-posix">
				
				<!-- 	The path to the executable. If you load a module you may not need the
						path and the name of the executable is enough.
				-->
				<Executable template="CommandLine"
						    name="Comandline"
						    description="The command you want to run"
							other="useHistory"
				/>
				
				<!-- 	This element contains the working directory of the job relative to the
						mountpoint root folder of the user for this job. The grisu core element
						converts it to be relative tIn most cases you would leave that as it is.o the cluster home directory later.
						In most cases you would leave that as it is.
				-->
				<WorkingDirectory />
				<!-- 	The name of the standard output file. -->
				<Output>stdout.txt</Output>
				<!--  	The name of the standard error file. -->
				<Error>stderr.txt</Error>
				

			</POSIXApplication>
			
			<!-- The total cpu time in seconds. Since the jsdl standard uses this instead
				 of the concept of walltime we know we need to multiply this value with
				 the amount of cpus (which the postprocess instruction does). 
		  	-->
			<TotalCPUTime template="InputInteger" name="Walltime"
				description="The total cpu time in seconds."
				multiplicity="1" defaultValue="600" 
				postprocess="TimesNoCPUs"
			/>

			<TotalCPUCount><exact template="InputInteger" name="CPUs"
				description="How many CPUs do you want to use to run this job."
				multiplicity="1" defaultValue="1" prefills="1,2,4,8" /></TotalCPUCount>
				
			<TotalPhysicalMemory> 
				<LowerBoundedRange postprocess="ConvertToBytes" defaultValue="0" description="The minimum amount of memory in mb for this job." multiplicity="1" name="MinMem" title="MinMem" prefills="0,1024,2048,4096" template="InputInteger"> </LowerBoundedRange>
			</TotalPhysicalMemory>

		</Application>
		<Resources>
			<CandidateHosts>
				<!-- The following two nodes depend on each other. You can't submit a job to the host specified
					 by "HostName" and stage the files into a filesystem "userExecutionHostFs" that is at a 
					 different site. The module "Common" should take care of that so just leave the following
					 two nodes as they are. If you are not using the "Common" module, you need to make sure that
					 the input is correct.
				-->
				<HostName template="InputString" name="HostName"/>

			</CandidateHosts>

		</Resources>
		<DataStaging>
			<FileName />
			<FileSystemName></FileSystemName>
			<Source>
				<!-- The "MultipleInputFiles" is a TemplateNode that renders a NortonCommander like panel which allows
					 the user to select multiple files (from different locations) which are staged in to the job
					 directory before the job is submitted.
					 Multiplicity can be "*" or "1", where "*" means input is optional and "1" that at least one file 
					 has to be specified.
				 	 The postprocess instruction tells grisu to fill the above "FileName" element with the appropriate
				 	 path/filename once the file is staged into the job directory.
				 	 Under the hood grisu clones the encapsulating "DataStaging" element as often as there are user choosen
				 	 input files. It does the postprocessing for every one of these clones seperately. Once the job is submitted,
				 	 the clones are deleted again.
				 	 
				 	 For a more detailed description or for description on other TemplateNodes that can be used have a look 
				 	 at "http://www.grid.apac.edu.au/repository/trac/grisu/wiki/GrisuTemplates".
		   		-->
				<URI template="MultipleInputFiles" name="The files"
					description="Provide input files (if needed)."
					multiplicity="*" validator="InputFile" />

			</Source>
		</DataStaging>
	</JobDescription>
</JobDefinition>
