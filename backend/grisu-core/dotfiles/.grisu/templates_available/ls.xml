<?xml version="1.0" encoding="UTF-8"?>
<JobDefinition xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl">

	<JobDescription grisu_modules="MatchMakerPanel">
	
		<GrisuTemplate xmlns="http://arcs.org.au/jsdl/jsdl-grisu">
			<Email description="The email address to send an email to if the job status changes." multiplicity="?" name="EmailAddress" other="useLastValue" template="Email"/>
	</GrisuTemplate>
	
		<JobIdentification>
	
			<!-- The JobName template type renders a panel that is kind of 
				 smart about which jobnames already exist and can suggest or automatically
				 fill in appropriate jobnames according to the user-input/defaultValue that
				 is set.
		    -->
			<JobName 	template="JobName" 
						name="Jobname"
						description="The name of the job." 
						defaultValue="ls_job" 
						other="autosuggest,nosuggestbutton" />

		</JobIdentification>
		
		<Application>
			<!-- 	The ApplicationName is a generic name for an application. It does not
				 	contain the path or anything else. This name could be used by mds to figure
				 	out where the application is supported.
				 	It is also used by Grisu to determine whether an application-specific viewer 
				 	panel for this application exists so if you want to use one of these then you
				 	need to know what the name is that Grisu expects.
			-->
			<ApplicationName >ls</ApplicationName>
			<ApplicationVersion template="Version" name="Version" title="Version" description="The version" defaultValue="any_version" other="useDefault"></ApplicationVersion>
			<POSIXApplication
				xmlns="http://schemas.ggf.org/jsdl/2005/11/jsdl-posix">
				
				<!-- 	The path to the executable. If you load a module you may not need the
						path and the name of the executable is enough.
				-->
				<Executable>ls</Executable>
				
				<WorkingDirectory/>
				<!-- 	The name of the standard output file. -->
				<Output>stdout.txt</Output>
				<!--  	The name of the standard error file. -->
				<Error>stderr.txt</Error>

			</POSIXApplication>
			
			<!-- The total cpu time in seconds. Since the jsdl standard uses this instead
				 of the concept of walltime we know we need to multiply this value with
				 the amount of cpus (which the postprocess instruction does). 
		  	-->
			<TotalCPUTime template="InputInteger" name="Walltime"
				description="The total cpu time in seconds."
				multiplicity="1" defaultValue="600" 
				postprocess="TimesNoCPUs"
			/>

			<TotalCPUCount><exact template="InputInteger" name="CPUs"
				description="How many CPUs do you want to use to run this job."
				multiplicity="1" other="force=single" /></TotalCPUCount>
				
			<TotalPhysicalMemory> 
				<LowerBoundedRange postprocess="ConvertToBytes" defaultValue="0" description="The minimum amount of memory in mb for this job." multiplicity="1" name="MinMem" prefills="0,1024,2048,4096" template="InputInteger"> </LowerBoundedRange>
			</TotalPhysicalMemory>

		</Application>
		<Resources>
			<CandidateHosts>

				<HostName template="InputString" name="HostName" />

			</CandidateHosts>

		</Resources>
		<DataStaging>
			<FileName />
			<FileSystemName>userExecutionHostFs</FileSystemName>
			<Source>
				<!-- The "MultipleInputFiles" is a TemplateNode that renders a NortonCommander like panel which allows
					 the user to select multiple files (from different locations) which are staged in to the job
					 directory before the job is submitted.
					 Multiplicity can be "*" or "1", where "*" means input is optional and "1" that at least one file 
					 has to be specified.
				 	 The postprocess instruction tells grisu to fill the above "FileName" element with the appropriate
				 	 path/filename once the file is staged into the job directory.
				 	 Under the hood grisu clones the encapsulating "DataStaging" element as often as there are user choosen
				 	 input files. It does the postprocessing for every one of these clones seperately. Once the job is submitted,
				 	 the clones are deleted again.
				 	 
				 	 For a more detailed description or for description on other TemplateNodes that can be used have a look 
				 	 at "http://www.grid.apac.edu.au/repository/trac/grisu/wiki/GrisuTemplates".
		   		-->
				<URI template="MultipleInputFiles" name="The files"
					description="Provide at least one input file here."
					multiplicity="*"
					validator="InputFile" />

			</Source>
		</DataStaging>
	</JobDescription>
</JobDefinition>
